import org.parchmentmc.lodestone.tasks.*;

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'org.parchmentmc.writtenbooks' version '0.4.0'
    // Lodestone obviously for metadata management tasks
    id 'org.parchmentmc.lodestone' version '0.9.0'

    // Publishing
    id 'maven-publish'
}

lodestone {
    mcVersion = blackstone_targets_mc_version
}

afterEvaluate {
    println "MC Version: ${lodestone.resolvedMcVersion.get()}"
}

def downloadLauncherMeta = tasks.register('downloadLauncherMeta', DownloadLauncherMetadata)

def downloadVersionMeta = tasks.register('downloadVersionMeta', DownloadVersionMetadata) {
    input = downloadLauncherMeta.flatMap { it.output }
}

def downloadVersion = tasks.register('downloadVersion', DownloadVersion) {
    input = downloadVersionMeta.flatMap { it.output }
}

def createProGuardMetadata = tasks.register('createProGuardMetadata', ExtractMetadataFromProguardFile) {
    input = downloadVersion.flatMap { it.output }.map { it.file('client.txt') }
}

def createJarMetadata = tasks.register('createJarMetadata', ExtractMetadataFromJarFiles) {
    input = downloadVersion.flatMap { it.output }.map { it.file('client.jar') }
    libraries = downloadVersion.flatMap { it.output }.map { it.dir('libraries') }
}

def mergeMetadata = tasks.register('mergeMetadata', MergeMetadata) {
    leftSource = createJarMetadata.flatMap { it.output }
    rightSource = createProGuardMetadata.flatMap { it.output }
}

def createDistribution = tasks.register('createDistribution', Zip) {
    archiveFileName = lodestone.resolvedMcVersion.map { "${it}.zip" }
    destinationDirectory = layout.buildDirectory.dir('dist')

    from mergeMetadata.flatMap { it.output }
}

def clean = tasks.register('clean', Delete) {
    delete project.layout.buildDirectory
}

def build = tasks.register('build') {
    dependsOn createDistribution
}

tasks.publish.dependsOn build

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.parchmentmc.data'

            afterEvaluate {
                version lodestone.resolvedMcVersion.get()
            }

            artifact createDistribution

            pom {
                name = 'Blackstone'
                description = 'Metadata from the minecraft jar created for each published MC Version.'
                url = 'https://github.com/ParchmentMC/Blackstone'
                properties.put('minecraft_version', lodestone.resolvedMcVersion)
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'OrionDevelopment'
                        name = 'Marc Hermans'
                        email = 'marc.hermans@ldtteam.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/parchmentmc/blackstone.git'
                    developerConnection = 'scm:git:https://github.com/parchmentmc/blackstone.git'
                    url = 'https://github.com/ParchmentMC/Blackstone'
                }
            }
        }
    }
}
