import org.parchmentmc.lodestone.tasks.*;

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'org.parchmentmc.writtenbooks' version '0.4.0'
    // Lodestone obviously for metadata management tasks
    id 'org.parchmentmc.lodestone' version '0.3.1'

    // Publishing
    id 'maven-publish'
}

lodestone {
    mcVersion = blackstone_targets_mc_version
}

def downloadLauncherMeta = tasks.register('downloadLauncherMeta', DownloadLauncherMetadata) {
    
}

def downloadVersionMeta = tasks.register('downloadLatestVersionMeta', DownloadVersionMetadata) {
    dependsOn downloadLauncherMeta

    it.getInput().set(downloadLauncherMeta.get().getOutput())
}

def downloadVersion = tasks.register('downloadLatestVersion', DownloadVersion) {
    dependsOn downloadVersionMeta

    it.getInput().set(downloadVersionMeta.get().getOutput())
}

def createProGuardMetadata = tasks.register("createProGuardMetadata", ExtractMetadataFromProguardFile) {
    dependsOn downloadVersion

    it.getInput().set(downloadVersion.get().getOutput().map({dir -> dir.file("client.txt") }))
}

def createJarMetadata = tasks.register("createJarMetadata", ExtractMetadataFromJarFiles) {
    dependsOn downloadVersion

    it.getInput().set(downloadVersion.get().getOutput().map({dir -> dir.file("client.jar") }))
    it.getLibraries().set(downloadVersion.get().getOutput().map({dir -> dir.dir("libraries") }))
}

def mergeMetadata = tasks.register("mergeMetadata", MergeMetadata) {
    dependsOn createJarMetadata
    dependsOn createProGuardMetadata

    it.getLeftSource().set(createJarMetadata.get().getOutput())
    it.getRightSource().set(createProGuardMetadata.get().getOutput())
}

def createDist = tasks.register('createDistribution', Zip) {
    dependsOn mergeMetadata

    archiveFileName = "${blackstone_targets_mc_version}.zip"
    destinationDirectory = layout.buildDirectory.dir('dist')

    from mergeMetadata.get().getOutput()
}

def build = tasks.register('build') {
    dependsOn createDist
}

tasks.publish.dependsOn build

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'org.parchmentmc.data'

            version blackstone_targets_mc_version

            artifact createDist

            pom {
                name = 'Blackstone'
                description = 'Metadata from the minecraft jar created for each published MC Version.'
                url = 'https://github.com/ParchmentMC/Blackstone'
                properties = [
                        'minecraft_version': blackstone_targets_mc_version,
                ]
                licenses {
                    license {
                        name = 'MIT'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'OrionDevelopment'
                        name = 'Marc Hermans'
                        email = 'marc.hermans@ldtteam.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/parchmentmc/blackstone.git'
                    developerConnection = 'scm:git:https://github.com/parchmentmc/blackstone.git'
                    url = 'https://github.com/ParchmentMC/Blackstone'
                }
            }
        }
    }
}